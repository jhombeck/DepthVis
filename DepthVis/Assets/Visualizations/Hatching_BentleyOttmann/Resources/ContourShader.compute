// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel GenerateContourSegments

struct resultBufferStructure {
	float3 objectStart;
	float3 objectEnd;
	float3 normalStart;
	float3 normalEnd;
	float2 screenStart;
	float2 screenEnd;
	int containsSegment;
    int originalTriangleIndex;
    float3 interpolatingRatios;

};

Buffer<float3> vertices;
Buffer<float3> normals;
Buffer<int> triangles;
RWStructuredBuffer<resultBufferStructure> results;

float3 cameraPos;

float4x4 objectToClipSpace;

int numTriangles;

float2 wh_half;

[numthreads(64, 1, 1)]
void GenerateContourSegments(uint3 id : SV_DispatchThreadID)
{
	// TODO: insert actual code here!
	if (id.x <(uint) numTriangles) {
		int ind1 = triangles[3 * id.x];
		int ind2 = triangles[3 * id.x + 1];
		int ind3 = triangles[3 * id.x + 2];


		float3 p1 = vertices[ind1];
		float3 p2 = vertices[ind2];
		float3 p3 = vertices[ind3];

		float3 n1 = normals[ind1];
		float3 n2 = normals[ind2];
		float3 n3 = normals[ind3];

		int containsSegment;
		float dot1 = dot(cameraPos - p1, n1);
		float dot2 = dot(cameraPos - p2, n2);
		float dot3 = dot(cameraPos - p3, n3);



		results[id.x].containsSegment = 0;
		results[id.x].originalTriangleIndex = id.x;
		float3 ratioVector=float3(0,0,0);
		int n = 0;
		if (dot1 * dot2 < 0) {
			results[id.x].containsSegment = 1;
			float ratio = dot1 / (dot1 - dot2);
			results[id.x].objectStart = ratio * p2 + (1 - ratio) * p1;
			results[id.x].normalStart = ratio * n2 + (1 - ratio) * n1;
			ratioVector.x = ratio;
			ratioVector.z += 1;
			n++;
		}

		if (dot1 * dot3 < 0) {
			results[id.x].containsSegment = 1;
			float ratio = dot1 / (dot1 - dot3);
			if (n == 0) {
				results[id.x].objectStart = ratio * p3 + (1 - ratio) * p1;
				results[id.x].normalStart = ratio * n3 + (1 - ratio) * n1;
				ratioVector.x = ratio;
			}
			else {
				results[id.x].objectEnd = ratio * p3 + (1 - ratio) * p1;
				results[id.x].normalEnd = ratio * n3 + (1 - ratio) * n1;
				ratioVector.y = ratio;
			}
			ratioVector.z += 2;
			n++;
		}

		if (dot2 * dot3 < 0) {
			results[id.x].containsSegment = 1;
			float ratio = dot2 / (dot2 - dot3);
			results[id.x].objectEnd = ratio * p3 + (1 - ratio) * p2;
			results[id.x].normalEnd = ratio * n3 + (1 - ratio) * n2;
			ratioVector.y = ratio;
			ratioVector.z += 4;
			n++;
		}
		results[id.x].interpolatingRatios = ratioVector;
		if (n == 2) {
			//homogenus coordinates
			float4 p1=float4(results[id.x].objectStart,1);
			float4 p2=float4(results[id.x].objectEnd,1);


			p1 =mul( objectToClipSpace , p1);
			p2 =mul( objectToClipSpace , p2);

			//back to normal coordinates
			p1 /= p1.w;
			p2 /= p2.w;

			//UNITY_NEAR_CLIP_VALUE would be nice to ave
			//discard contour segments, which are not in view
			results[id.x].containsSegment *= (-1<=p1.x&&p1.x<=1&& -1<=p1.y&&p1.y<=1&&0<=p1.z&&p1.z<=1)||(-1<=p2.x&&p2.x<=1&& -1<=p2.y&&p2.y<=1&&0<=p2.z&&p2.z<=1);
			results[id.x].screenStart = (p1.xy+1)*wh_half;
			results[id.x].screenEnd = (p2.xy+1)*wh_half;
			//results[id.x].screenStart = p1.xy;
			//results[id.x].screenEnd = p2.xy;
		}

	}
}
